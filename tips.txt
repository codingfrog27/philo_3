ALMOST ALMOST
1 done, protection also done, still not fast enough so COULD try duco strat
which is: make the forks mutex protected bools and let a grab fork function
simply loop over them untill they're both true. Then it can eat and another drop
forks function can turn them true again afterwards

^-- does this not cause higher die chance if theres no que system?



ALMOST DONE (this week plsss) last things

1 increase speed by death lock per philo
2 change time functions to make them stop rounding off
3 use new death lock to check for death while sleeping





OCT 18
FIXED A MEMORY THING WITH VALGRIND LEGGO




OCT 12

1 monitor problems with full checking
		-if max meals arg not given it autocompletes
		-and in general everyone full triggers too quickly (b4 everyone has actually eaten)


2 timestamps are all in mili not microseconds, causing less acurate timestamps

3 put a still alive check in sleep after all?

Other ppl that can check/help: Acco, Astrid


PS: DONT FORGET TO UPLOAD IN PHILO SUBDIR WHEN TURNING IN PROJECT




22
MAIN OBJS
1 single philo handler
2 proper cleanup and ending

QUESTION
can i free the memory after I pthread join? think so but
if not threadid might have to be stored in data

OPTIONAL OBJS
1 orlando fork switch on uneven
2 Jisse sleep first on uneven
3 inbetween sleep checks? (prolly nah tho)



21-09-2023

-OKAY So

or I can just timestamp current time whenever philo eats, and then see
if the diff between last mealtime and current time > time to die
AKA == (timestamp - lastmealtime) > time to die

OR
when I update mealtime I make their last mealtime their "time till death"
and make it <timestamp + death time > and then do
 (lastmealtime + deathtime) > timestamp




12-09-2023

-Fix mealtime updating, approaches are in notebook
-when philo is found dead in monitoring, make custom death print



11=19=2023

-Note if I want Orlandos slower but slightly safer method at the %2 mini sleep at the start
	I switch left and right for so that there's 0 possibility for any deadlock


-fix proper monitoring locking when death has been discovered
-clean functions and init and parsing
-double check time






06-09-2023

working sofar, time can be done cleaner
Also could give printing different colours depending on the enum given so
we will have different colours for both philos and actions




TODO

-seperate parsing and init
-better logic/structure for time functions (optional but nice?)
-philos currently dont die even if they should, I can starting testing by
dprintfing the mealtimes in monitoring to a seperate file :)






























































1 thread for printing

2 can init philos be a bzero type of function?
3 add malloc fail protection to init philos





data structure questions:

-right now data has an array of philo structs, is this the right way to go about it?







-compiling with sanitize thread
-


-have monitor and printing thread


-have 1 wirting mutex that gets locked every time u wanna msg, and only get ur timestamp after
locking that mutex



-left off at


21-08 went back after nother break, is confusing, at starting simulation now




print lock should be one singular shared cause its to stop printing getting
mixed up

quintescential== meal lock (per philo), 1 per for, 1print lock


use pthread join instead of sleep (or detach(if i do use detach wait
sleep arg time))
